{
  "questions": [
    {
      "text": "برای ساخت یک منوی چندسطحی در React که هر آیتم می‌تواند زیرمنو داشته باشد، چه نوع داده‌ای مناسب است؟\n\nمثال:\n<pre><code dir=\"ltr\">const menuItems = [\n  { title: 'Home', url: '/' },\n  { title: 'Services', url: '/services', submenu: [\n      { title: 'Web', url: '/services/web' },\n      { title: 'SEO', url: '/services/seo' }\n    ]\n  },\n  { title: 'About', url: '/about' }\n];</code></pre>",
      "difficulty": 1,
      "explanation": "چرا گزینه B صحیح است؟ زیرا هر آیتم منو یک شیء است و استفاده از آرایه‌ای از اشیاء اجازه می‌دهد منوهای چندسطحی به راحتی مدیریت شوند.",
      "tags": ["react.components.menu"],
      "answers": [
        { "text": "آرایه‌ای از رشته‌ها", "isCorrect": false },
        { "text": "آرایه‌ای از اشیاء", "isCorrect": true },
        { "text": "شیء ساده با کلید و مقدار", "isCorrect": false },
        { "text": "Set", "isCorrect": false }
      ]
    },
    {
      "text": "کامپوننت MenuItems در مثال زیر چه کاری انجام می‌دهد؟\n\n<pre><code dir=\"ltr\">const MenuItems = ({ items }) => {\n  return (\n    <li>\n      <a href={items.url}>{items.title}</a>\n    </li>\n  );\n};</code></pre>",
      "difficulty": 2,
      "explanation": "چرا گزینه A صحیح است؟ این کامپوننت یک آیتم منفرد از منو را دریافت کرده و آن را به صورت یک <li> با لینک مربوطه رندر می‌کند.",
      "tags": ["react.components.menu"],
      "answers": [
        { "text": "یک آیتم منفرد منو را رندر می‌کند", "isCorrect": true },
        { "text": "تمام آیتم‌های منو را رندر می‌کند", "isCorrect": false },
        { "text": "زیرمنوها را باز و بسته می‌کند", "isCorrect": false },
        { "text": "هیچ کاری انجام نمی‌دهد", "isCorrect": false }
      ]
    },
    {
      "text": "در کامپوننت Navbar زیر، چرا از key در map استفاده شده است؟\n\n<pre><code dir=\"ltr\">const Navbar = () => {\n  return (\n    <nav>\n      <ul className=\"menus\">\n        {menuItems.map((menu, index) => (\n          <MenuItems items={menu} key={index} />\n        ))}\n      </ul>\n    </nav>\n  );\n};</code></pre>",
      "difficulty": 2,
      "explanation": "چرا گزینه C صحیح است؟ استفاده از key به React کمک می‌کند تا تغییرات لیست را ردیابی کرده و رندر مؤثر انجام دهد و از هشدارهای مرتبط با عناصر تکراری جلوگیری شود.",
      "tags": ["react.components.menu"],
      "answers": [
        { "text": "برای استایل‌دهی آیتم‌ها", "isCorrect": false },
        { "text": "برای اتصال Event Handler", "isCorrect": false },
        { "text": "برای کمک به React در رندر مؤثر لیست‌ها", "isCorrect": true },
        { "text": "برای اضافه کردن زیرمنو به آیتم‌ها", "isCorrect": false }
      ]
    },
    {
      "text": "در منوی چندسطحی، اگر بخواهیم زیرمنوها با کلیک کاربر نمایش داده شوند، کدام هوک React مناسب است؟",
      "difficulty": 2,
      "explanation": "چرا گزینه B صحیح است؟ useState به ما اجازه می‌دهد که وضعیت باز یا بسته بودن هر زیرمنو را نگه داریم و با تغییر آن، رندر مجدد برای نمایش یا مخفی کردن زیرمنو انجام شود.",
      "tags": ["react.components.menu"],
      "answers": [
        { "text": "useEffect", "isCorrect": false },
        { "text": "useState", "isCorrect": true },
        { "text": "useContext", "isCorrect": false },
        { "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "text": "چه مزیتی در استفاده از کامپوننت MenuItems برای هر آیتم منو وجود دارد؟\n\nفرض کنید می‌خواهیم منوهای سطح بالا و زیرمنوها را به صورت جداگانه مدیریت کنیم.",
      "difficulty": 3,
      "explanation": "چرا گزینه D صحیح است؟ ایجاد کامپوننت مجزا باعث می‌شود منطق رندر هر آیتم جدا شود، کد تمیزتر شود و رندر تودرتو و مدیریت زیرمنوها ساده‌تر گردد.",
      "tags": ["react.components.menu"],
      "answers": [
        { "text": "کد کوتاه‌تر می‌شود ولی مدیریت سخت‌تر", "isCorrect": false },
        { "text": "فقط برای استایل‌دهی استفاده می‌شود", "isCorrect": false },
        { "text": "صرفاً برای افزودن Event Handlerها است", "isCorrect": false },
        { "text": "منطق رندر هر آیتم جدا می‌شود و مدیریت زیرمنو ساده‌تر می‌شود", "isCorrect": true }
      ]
    }
  ]
}
