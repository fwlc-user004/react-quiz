{
  "questions": [
    {
      "text": "<p>در کامپوننت <code dir=\"ltr\">Toolbar</code> زیر، چرا فراخوانی تابع <code dir=\"ltr\">handleThemeClick</code> با پرانتز () نیست؟\n<code dir=\"ltr\">function Toolbar() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  function handleThemeClick() { setIsDarkMode(!isDarkMode); }\n  return (<button onClick={handleThemeClick}>Change Theme</button>);\n}</code></p>",
      "difficulty": 2,
      "explanation": "<p>چرا گزینه <code dir=\"ltr\">B</code> صحیح است؟ فراخوانی تابع بدون پرانتز باعث می‌شود که <code dir=\"ltr\">React</code> آن را تنها وقتی کاربر کلیک می‌کند اجرا کند.</p>",
      "tags": [
        "react.events.state"
      ],
      "answers": [
        {
          "text": "<p>چون <code dir=\"ltr\">React</code> نمی‌تواند توابع با پرانتز را مدیریت کند</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون می‌خواهیم تابع فقط در زمان رخداد <code dir=\"ltr\">onClick</code> اجرا شود نه هنگام رندر</p>",
          "isCorrect": true
        },
        {
          "text": "<p>چون <code dir=\"ltr\">handleThemeClick</code> مقدار بازگشتی ندارد</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون <code dir=\"ltr\">setIsDarkMode</code> همیشه به صورت خودکار اجرا می‌شود</p>",
          "isCorrect": false
        }
      ]
    },
    {
      "text": "<p>در کامپوننت <code dir=\"ltr\">AlertButton</code>، چگونه <code dir=\"ltr\">handleClick</code> به <code dir=\"ltr\">prop</code> <code dir=\"ltr\">message</code> دسترسی دارد؟\n<code dir=\"ltr\">function AlertButton({ message, children }) {\n  function handleClick() { alert(message); }\n  return (<button onClick={handleClick}>{children}</button>);\n}</code></p>",
      "difficulty": 2,
      "explanation": "<p>چرا گزینه <code dir=\"ltr\">A</code> صحیح است؟ <code dir=\"ltr\">handleClick</code> در <code dir=\"ltr\">scope</code> والد قرار دارد و به <code dir=\"ltr\">prop</code> <code dir=\"ltr\">message</code> دسترسی مستقیم دارد.</p>",
      "tags": [
        "react.events.state"
      ],
      "answers": [
        {
          "text": "<p>به دلیل <code dir=\"ltr\">closure</code> در جاوااسکریپت، تابع دسترسی به <code dir=\"ltr\">prop</code> والد دارد</p>",
          "isCorrect": true
        },
        {
          "text": "<p>چون <code dir=\"ltr\">React</code> به صورت خودکار همه <code dir=\"ltr\">props</code> را به تمام توابع داخلی پاس می‌دهد</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون <code dir=\"ltr\">message</code> یک متغیر سراسری است</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون <code dir=\"ltr\">children</code> حاوی <code dir=\"ltr\">message</code> است</p>",
          "isCorrect": false
        }
      ]
    },
    {
      "text": "<p>چرا تعریف <code dir=\"ltr\">Event</code> <code dir=\"ltr\">Handler</code>ها در سطح بالای کامپوننت اهمیت دارد؟</p>",
      "difficulty": 3,
      "explanation": "<p>چرا گزینه <code dir=\"ltr\">C</code> صحیح است؟ تعریف توابع در سطح بالا تضمین می‌کند که هوک‌ها و <code dir=\"ltr\">state</code>ها همیشه به ترتیب صحیح فراخوانی شوند.</p>",
      "tags": [
        "react.events.state"
      ],
      "answers": [
        {
          "text": "<p>چون در سطح پایین سرعت کد بیشتر می‌شود</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون فقط در سطح بالا می‌توان <code dir=\"ltr\">JSX</code> نوشت</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون ترتیب فراخوانی <code dir=\"ltr\">useState</code> و دسترسی به <code dir=\"ltr\">state</code> صحیح حفظ می‌شود</p>",
          "isCorrect": true
        },
        {
          "text": "<p>چون توابع داخلی نمی‌توانند <code dir=\"ltr\">props</code> را بخوانند</p>",
          "isCorrect": false
        }
      ]
    },
    {
      "text": "<p>در کامپوننت <code dir=\"ltr\">LoginForm</code>، چرا تغییر مقدار <code dir=\"ltr\">email</code> باعث تغییر <code dir=\"ltr\">password</code> نمی‌شود?\n<code dir=\"ltr\">function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  return (<div>\n    <input value={email} onChange={e => setEmail(e.target.value)} />\n    <input value={password} onChange={e => setPassword(e.target.value)} />\n  </div>);\n}</code></p>",
      "difficulty": 3,
      "explanation": "<p>چرا گزینه <code dir=\"ltr\">A</code> صحیح است؟ هر <code dir=\"ltr\">state</code> مستقل است و رندر فقط برای <code dir=\"ltr\">state</code> تغییر یافته انجام می‌شود.</p>",
      "tags": [
        "react.state.multiple"
      ],
      "answers": [
        {
          "text": "<p>هر <code dir=\"ltr\">state</code> به صورت مستقل مدیریت می‌شود و رندر فقط برای <code dir=\"ltr\">state</code> تغییر یافته اعمال می‌شود</p>",
          "isCorrect": true
        },
        {
          "text": "<p><code dir=\"ltr\">setPassword</code> به صورت خودکار با <code dir=\"ltr\">setEmail</code> هماهنگ می‌شود</p>",
          "isCorrect": false
        },
        {
          "text": "<p><code dir=\"ltr\">React</code> رندر مجدد همه <code dir=\"ltr\">state</code>ها را اعمال می‌کند اما <code dir=\"ltr\">effect</code> نمی‌شود</p>",
          "isCorrect": false
        },
        {
          "text": "<p><code dir=\"ltr\">useState</code> تنها یک <code dir=\"ltr\">state</code> را در هر رندر به‌روزرسانی می‌کند</p>",
          "isCorrect": false
        }
      ]
    },
    {
      "text": "<p>در کامپوننت <code dir=\"ltr\">Toolbar</code>، چرا تغییر <code dir=\"ltr\">state</code> با <code dir=\"ltr\">setIsDarkMode</code> باعث رندر مجدد <code dir=\"ltr\">UI</code> می‌شود؟</p>",
      "difficulty": 2,
      "explanation": "<p>چرا گزینه <code dir=\"ltr\">B</code> صحیح است؟ فراخوانی <code dir=\"ltr\">setter</code> باعث می‌شود <code dir=\"ltr\">React</code> کامپوننت را دوباره فراخوانی کرده و تغییرات لازم را روی <code dir=\"ltr\">DOM</code> اعمال کند.</p>",
      "tags": [
        "react.state.basic"
      ],
      "answers": [
        {
          "text": "<p>چون <code dir=\"ltr\">setIsDarkMode</code> مقدار را ذخیره می‌کند ولی رندر اتفاق نمی‌افتد</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون فراخوانی <code dir=\"ltr\">setter</code> باعث رندر مجدد و به‌روزرسانی <code dir=\"ltr\">UI</code> می‌شود</p>",
          "isCorrect": true
        },
        {
          "text": "<p>چون <code dir=\"ltr\">React</code> به صورت خودکار تمام متغیرهای محلی را رندر می‌کند</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون هر تابع داخل کامپوننت به <code dir=\"ltr\">DOM</code> دسترسی مستقیم دارد</p>",
          "isCorrect": false
        }
      ]
    },
    {
      "text": "<p>چرا استفاده از چند <code dir=\"ltr\">state</code> مستقل در یک کامپوننت بهتر از یک <code dir=\"ltr\">state</code> پیچیده است؟</p>",
      "difficulty": 3,
      "explanation": "<p>چرا گزینه <code dir=\"ltr\">C</code> صحیح است؟ نگهداری <code dir=\"ltr\">state</code>های غیرمرتبط در متغیرهای جداگانه باعث خواناتر شدن و ساده‌تر شدن منطق به‌روزرسانی می‌شود.</p>",
      "tags": [
        "react.state.multiple"
      ],
      "answers": [
        {
          "text": "<p>چون همه <code dir=\"ltr\">state</code>ها همزمان به‌روزرسانی می‌شوند</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون <code dir=\"ltr\">React</code> تنها از یک <code dir=\"ltr\">state</code> در هر رندر پشتیبانی می‌کند</p>",
          "isCorrect": false
        },
        {
          "text": "<p>چون نگهداری و به‌روزرسانی <code dir=\"ltr\">state</code>ها مستقل و ساده‌تر است</p>",
          "isCorrect": true
        },
        {
          "text": "<p>چون <code dir=\"ltr\">state</code>های مستقل باعث جلوگیری از <code dir=\"ltr\">re-render</code> می‌شوند</p>",
          "isCorrect": false
        }
      ]
    },
    {
      "text": "<p>در کامپوننت <code dir=\"ltr\">LoginForm</code> زیر، چرا تغییر مقدار <code dir=\"ltr\">email</code> باعث تغییر <code dir=\"ltr\">password</code> نمی‌شود؟\n<code dir=\"ltr\">function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  return (\n    <div>\n      <input value={email} onChange={e => setEmail(e.target.value)} placeholder=\"Email\" />\n      <input value={password} onChange={e => setPassword(e.target.value)} placeholder=\"Password\" />\n    </div>\n  );\n}</code></p>",
      "difficulty": 3,
      "explanation": "<p>چرا گزینه <code dir=\"ltr\">A</code> صحیح است؟ هر <code dir=\"ltr\">state</code> مستقل است و <code dir=\"ltr\">React</code> رندر مجدد را تنها برای <code dir=\"ltr\">state</code> تغییر یافته اعمال می‌کند. در نتیجه تغییر <code dir=\"ltr\">email</code> فقط بخش مربوط به <code dir=\"ltr\">email</code> را به‌روز می‌کند و <code dir=\"ltr\">password</code> بدون تغییر باقی می‌ماند.</p>",
      "tags": [
        "react.state.multiple"
      ],
      "answers": [
        {
          "text": "<p>هر <code dir=\"ltr\">state</code> به صورت مستقل مدیریت می‌شود و رندر فقط برای <code dir=\"ltr\">state</code> تغییر یافته اعمال می‌شود</p>",
          "isCorrect": true
        },
        {
          "text": "<p><code dir=\"ltr\">setPassword</code> به صورت خودکار با <code dir=\"ltr\">setEmail</code> هماهنگ می‌شود</p>",
          "isCorrect": false
        },
        {
          "text": "<p><code dir=\"ltr\">React</code> رندر مجدد همه <code dir=\"ltr\">state</code>ها را اعمال می‌کند اما <code dir=\"ltr\">effect</code> نمی‌شود</p>",
          "isCorrect": false
        },
        {
          "text": "<p><code dir=\"ltr\">useState</code> تنها یک <code dir=\"ltr\">state</code> را در هر رندر به‌روزرسانی می‌کند</p>",
          "isCorrect": false
        }
      ]
    }
  ]
}
